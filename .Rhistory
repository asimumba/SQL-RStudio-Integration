library(sparklyr)
library(dplyr)
sc <- spark_connect(master = "local", version = "2.3")
library(DBI)
con <- dbConnect(odbc::odbc(), .connection_string = "Driver={SQL Server};", timeout = 10)
devtools::install_github("rstats-db/RSQLite")
reticulate::conda_version()
install.packages("RSQLite")
library(DBI)
# Create an ephemeral in-memory RSQLite database
con <- dbConnect(RSQLite::SQLite(), ":memory:")
dbListTables(con)
dbWriteTable(con, "mtcars", mtcars)
dbListTables(con)
dbListFields(con, "mtcars")
dbReadTable(con, "mtcars")
# You can fetch all results:
res <- dbSendQuery(con, "SELECT * FROM mtcars WHERE cyl = 4")
dbFetch(res)
# Or a chunk at a time
res <- dbSendQuery(con, "SELECT * FROM mtcars WHERE cyl = 4")
res <- dbSendQuery(con, "SELECT * FROM mtcars WHERE cyl = 4")
while(!dbHasCompleted(res)){
chunk <- dbFetch(res, n = 5)
print(nrow(chunk))
}
# Clear the result
dbClearResult(res)
# Disconnect from the database
dbDisconnect(con)
# con <- dbConnect(RSQLite::SQLite(), ":surgetech_conference:")
#
# dbListTables(con)
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "surgetech_conference.db")
con
dbListTables(con)
dbListFields(con, "COMPANY")
dbReadTable(con, "COMPANY")
dbReadTable(con, "ATTENDEE")
library(odbc)
odbcListDrivers()[1:2]
dir.create("data", showWarnings = FALSE)
download.file(url = "https://ndownloader.figshare.com/files/2292171",
destfile = "data/portal_mammals.sqlite", mode = "wb")
library(dplyr)
library(dbplyr)
mammals <- DBI::dbConnect(RSQLite::SQLite(), "data/portal_mammals.sqlite")
src_dbi(mammals)
tbl(mammals, sql("SELECT year, species_id, plot_id FROM surveys"))
install.packages(c("RCurl", "TSP"))
surveys <- tbl(mammals, "surveys")
surveys %>%
select(year, species_id, plot_id)
surveys %>%
head(10)
show_query(head(surveys, n = 10))
install.packages(c("callr", "cobs", "fracdiff", "gh", "lpSolve", "magick", "prettyunits", "RcppArmadillo", "RCurl", "rlang", "tidyr", "TSP", "yardstick"))
install.packages(c("cobs", "fracdiff", "lpSolve", "magick", "RcppArmadillo", "rlang", "tidyr", "yardstick"))
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
remove.packages("rlang", lib="~/R/win-library")
install.packages("rlang")
install.packages("rlang")
remotes::install_github("r-dbi/RPostgres")
library(DBI)
# Connect to the default postgres database
con <- dbConnect(RPostgres::Postgres())
dbListTables(con)
dbWriteTable(con, "mtcars", mtcars)
dbListTables(con)
dbListFields(con, "mtcars")
dbReadTable(con, "mtcars")
# You can fetch all results:
res <- dbSendQuery(con, "SELECT * FROM mtcars WHERE cyl = 4")
dbFetch(res)
dbClearResult(res)
# Or a chunk at a time
res <- dbSendQuery(con, "SELECT * FROM mtcars WHERE cyl = 4")
while(!dbHasCompleted(res)){
chunk <- dbFetch(res, n = 5)
print(nrow(chunk))
}
# Clear the result
dbClearResult(res)
# Disconnect from the database
dbDisconnect(con)
install.packages(c("emmeans", "esquisse", "repr", "sf", "sjlabelled", "tidyselect"))
library(DBI)
con <- dbConnect(odbc::odbc(), driver = "SQL Server", database = "AdventureWorks2012",
uid = "sqlfamily", pwd = "sqlf@m1ly", Server = "mhknbn2kdz.database.windows.net",
port = 1433)
con <- DBI::dbConnect(odbc::odbc(),
Driver    = "SQL Server",
Server    = "AARON-SIMUMBA\\SQLEXPRESS",
Database  = "AdventureWorks2017",
Port      = 1433)
# library(RODBC)
# con <- RODBC::odbcDriverConnect('driver={SQL Server};
#                                 server=AARON-SIMUMBA\\SQLEXPRESS;
#                                 database=AdventureWorks2017;
#                                 trusted_connection=true')
#
data <- sqlQuery(con, "SELECT * FROM Production.TransactionHistoryArchive;")
library(RODBC)
# con <- RODBC::odbcDriverConnect('driver={SQL Server};
#                                 server=AARON-SIMUMBA\\SQLEXPRESS;
#                                 database=AdventureWorks2017;
#                                 trusted_connection=true')
#
data <- sqlQuery(con, "SELECT * FROM Production.TransactionHistoryArchive;")
library(DBI)
con <- DBI::dbConnect(odbc::odbc(), Driver = "SQL Server", Server = "AARON-SIMUMBA\\SQLEXPRESS",
Database = "AdventureWorks2017", Port = 1433)
library(RODBC)
conn <- RODBC::odbcDriverConnect('driver={SQL Server};
server=AARON-SIMUMBA\\SQLEXPRESS;
database=AdventureWorks2017;
trusted_connection=true')
data <- sqlQuery(conn, "SELECT * FROM Production.TransactionHistoryArchive;")
data
library(tidyverse)
data <- sqlQuery(conn, "SELECT * FROM Production.TransactionHistoryArchive;") %>%
tbl()
data %>%
as_tibble()
library(RODBC)
library(tidyverse)
conn <- RODBC::odbcDriverConnect('driver={SQL Server};
server=AARON-SIMUMBA\\SQLEXPRESS;
database=AdventureWorks2017;
trusted_connection=true')
data <- sqlQuery(conn, "SELECT * FROM Production.TransactionHistoryArchive;")
data %>%
as_tibble()
data %>%
as_tibble() %>%
select(ProductID, Quantity, ActualCost) %>%
group_by(ProductID)
data %>%
as_tibble() %>%
select(ProductID, Quantity, ActualCost) %>%
group_by(ProductID) %>%
summarise(Average_cost = mean(ActualCost))
data %>%
as_tibble() %>%
select(ProductID, Quantity, ActualCost) %>%
group_by(ProductID) %>%
summarise(Average_cost = mean(ActualCost)) %>%
arrange(desc(Average_cost))
data %>%
as_tibble() %>%
select(ProductID, Quantity, ActualCost) %>%
group_by(ProductID) %>%
summarise(Average_cost = mean(ActualCost)) %>%
arrange(desc(Average_cost)) %>%
filter(Average_cost > 1000) %>%
ggplot(aes(x = ProductID, y = Average_cost)) +
geom_bar()
ggplot(aes(x = ProductID) +
data %>%
as_tibble() %>%
select(ProductID, Quantity, ActualCost) %>%
group_by(ProductID) %>%
summarise(Average_cost = mean(ActualCost)) %>%
arrange(desc(Average_cost)) %>%
filter(Average_cost > 1000) %>%
ggplot(aes(x = ProductID)) +
geom_bar()
data %>%
as_tibble() %>%
select(ProductID, Quantity, ActualCost) %>%
group_by(ProductID) %>%
summarise(Average_cost = mean(ActualCost)) %>%
arrange(desc(Average_cost)) %>%
filter(Average_cost > 1000) %>%
ggplot(aes(x = ProductID)) +
geom_bar()
data %>%
as_tibble() %>%
select(ProductID, Quantity, ActualCost) %>%
group_by(ProductID) %>%
summarise(Average_cost = mean(ActualCost)) %>%
arrange(desc(Average_cost)) %>%
filter(Average_cost > 1000)
data %>%
as_tibble() %>%
select(ProductID, Quantity, ActualCost) %>%
group_by(ProductID) %>%
summarise(Average_cost = mean(ActualCost)) %>%
arrange(desc(Average_cost)) %>%
filter(Average_cost > 1000) %>%
ggplot(aes(x = ProductID, weight = ProductID)) +
geom_bar()
data %>%
as_tibble() %>%
select(ProductID, Quantity, ActualCost) %>%
group_by(ProductID) %>%
summarise(Average_cost = mean(ActualCost)) %>%
arrange(desc(Average_cost)) %>%
filter(Average_cost > 1000) %>%
ggplot(aes(x = Average_cost)) +
geom_histogram()
data %>%
as_tibble() %>%
select(ProductID, Quantity, ActualCost) %>%
group_by(ProductID) %>%
summarise(Average_cost = mean(ActualCost)) %>%
arrange(desc(Average_cost)) %>%
ggplot(aes(x = Average_cost)) +
geom_histogram()
data %>%
as_tibble() %>%
select(ProductID, Quantity, ActualCost) %>%
group_by(ProductID) %>%
summarise(Average_cost = mean(ActualCost)) %>%
arrange(desc(Average_cost)) %>%
ggplot(aes(x = Average_cost)) +
geom_histogram(bins = 50)
data %>%
as_tibble() %>%
select(ProductID, Quantity, ActualCost) %>%
group_by(ProductID) %>%
summarise(Average_cost = mean(ActualCost)) %>%
arrange(desc(Average_cost)) %>%
ggplot(aes(x = Average_cost)) +
geom_histogram(binwidth = 20)
data %>%
as_tibble() %>%
select(ProductID, Quantity, ActualCost) %>%
group_by(ProductID) %>%
summarise(Average_cost = mean(ActualCost)) %>%
arrange(desc(Average_cost)) %>%
ggplot(aes(x = Average_cost)) +
geom_histogram(binwidth = 10)
con <- DBI::dbConnect(odbc::odbc(),
Driver    = "SQL Server",
Server    = "AARON-SIMUMBA\\SQLEXPRESS",
Database  = "AdventureWorks2017",
Uid       = "Ruseraaron",
Port      = 1433)
?DBI::dbDisconnect
con <- DBI::dbConnect(odbc::odbc(),
Driver    = "SQL Server",
Server    = "AARON-SIMUMBA\\SQLEXPRESS",
Database  = "AdventureWorks2017",
UID      = "Ruseraaron",
Port      = 1433)
con <- DBI::dbConnect(odbc::odbc(),
Driver    = "SQL Server",
Server    = "AARON-SIMUMBA\\SQLEXPRESS",
Database  = "AdventureWorks2017",
Port      = 1433)
con <- DBI::dbConnect(odbc::odbc(),
Driver    = "SQL Server",
Server    = "AARON-SIMUMBA\\SQLEXPRESS",
Database  = "AdventureWorks2017",
Port      = 1433,
UID    = rstudioapi::askForPassword("Database user"),
PWD    = rstudioapi::askForPassword("Database password"))
data %>%
as_tibble() %>%
select(ProductID, Quantity, ActualCost) %>%
group_by(ProductID) %>%
# summarise(Average_cost = mean(ActualCost)) %>%
# arrange(desc(Average_cost)) %>%
ggplot(aes(x = ProductID, Average_cost)) +
geom_boxplot()
data %>%
as_tibble() %>%
select(ProductID, Quantity, ActualCost) %>%
group_by(ProductID) %>%
# summarise(Average_cost = mean(ActualCost)) %>%
# arrange(desc(Average_cost)) %>%
ggplot(aes(x = ProductID, ActualCost)) +
geom_boxplot()
data %>%
as_tibble() %>%
select(ProductID, Quantity, ActualCost) %>%
group_by(ProductID) %>%
# summarise(Average_cost = mean(ActualCost)) %>%
# arrange(desc(Average_cost)) %>%
ggplot(aes(x = ProductID, y = ActualCost, group = ProductID)) +
geom_boxplot()
con <- DBI::dbConnect(odbc::odbc(),
Driver    = "SQL Server",
Server    = "AARON-SIMUMBA\\SQLEXPRESS",
Database  = "AdventureWorks2017",
Port      = 1433,
UID    = rstudioapi::askForPassword("Database user"),
PWD    = rstudioapi::askForPassword("Database password"))
con <- DBI::dbConnect(odbc::odbc(),
Driver    = "SQL Server",
Server    = "AARON-SIMUMBA\\SQLEXPRESS",
Database  = "AdventureWorks2017",
Port      = 1433,
UID    = rstudioapi::askForPassword("Database user"),
PWD    = rstudioapi::askForPassword("Database password"))
con <- DBI::dbConnect(odbc::odbc(),
Driver    = "SQL Server",
Server    = "AARON-SIMUMBA\\SQLEXPRESS",
Database  = "AdventureWorks2017",
Port      = 1433,
UID    = rstudioapi::askForPassword("Database user"),
PWD    = rstudioapi::askForPassword("Database password"))
install.packages("raster")
?.rs.askForSecret
??.rs.askForSecret
con <- DBI::dbConnect(odbc::odbc(),
Driver    = "SQL Server",
Server    = "AARON-SIMUMBA\\SQLEXPRESS",
Database  = "AdventureWorks2017",
Port      = 1433,
UID       = "rstudioconnect",
PWD       = .rs.askForSecret(name ="AARON-SIMUMBA\\SQLEXPRESS" ,"Password", "Database Passord:"))
con <- DBI::dbConnect(odbc::odbc(),
Driver    = "SQL Server",
Server    = "AARON-SIMUMBA\\SQLEXPRESS",
Database  = "AdventureWorks2017",
Port      = 1433,
UID       = "rstudioconnect",
PWD       = .rs.askForSecret(name ="AARON-SIMUMBA\\SQLEXPRESS" ,"Password", "Database Passord:"))
con <- DBI::dbConnect(odbc::odbc(),
Driver    = "SQL Server",
Server    = "AARON-SIMUMBA\\SQLEXPRESS",
Database  = "AdventureWorks2017",
Port      = 1433,
UID       = "rstudioconnect",
PWD       = .rs.askForSecret(name ="AARON-SIMUMBA\\SQLEXPRESS" ,"Password", "Database Password:"))
